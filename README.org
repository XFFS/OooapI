#+title: OooapI: OCaml of OpenAPI

*tl;dr*: OooapI implements a solution to this problem:

#+begin_src
spec:'OpenAPI spec' -> 'client library for'(spec):OCaml
#+end_src

* Overview

OooapI[fn:1] is OCaml of (and for) OpenAPI 3.0 specs.

OooapI currently supports:

- Generating OCaml clients for a (a substantial) fragment of the OpenAPI
  specification schema.
- Generating a family of OCaml types encoding the supported OpenAPI fragment's
  request and response data.

* Approach

- OooapI should produce an OCaml library satisfying the target OpenAPI spec. It
  should not generate boilerplate for an OCaml client.
- Extension, revision, or alteration of the generated client library should be
  done via the OCaml module system and shadowing the generated code, not by
  editing the generated code.
- As little code should be dynamically generated as possible. Instead, put all
  reusable logic into a library.

** Library principles

- Each operation is defined as a function.
- Everything that ends up the body of POST request is passed together as a
  single ~data argument to an operation function, whether multipart form, JSON,
  or binary data.
- Anything that goes in the path, query parameters, or headers, is passed via
  arguments to an operation function.
- Try to fail gracefully: JSON Schemas that are too complicated for us to
  support currently should degrade to untyped json.

* Caveat

This tool, and the associated library, are meant to assist OCaml programmers who
need to interface with servers that sepcify their API via OpenAPI. However, if
an alternative machine-readable specification is available, we would recommend
considering it instead. Moreover, we would discourage server authors from using
OpenAPI to specify their systems.

We have come to the conclusion that OpenAPI and JSON Schema (upon which the
former depends) are bad specification languages. Both languages adopt and
propagate accidental complexity and inconsistent structure, and we believe that
their widespread adoption in web development is a dangerous and costly
proliferation of systemic technical debt.

We have compiled [[./notes.org][some notes explaining the rationale for this assessment]].

Please not this assessment is purely technical, and not a judgment about the
intentions or abilities of those who have worked so hard on these efforts.
* Alternatives

- [[https://github.com/OpenAPITools/openapi-generator/][OpenAPI Generator]] includes a generator that is meant to produce OCaml client boilerplate.
- [[https://github.com/andrenth/ocaml-swagger][OCaml-Swagger]] is a code generator that implements Swagger 2.0 API clients in OCaml.

* Known Limitations
** JSON Schema:
- Limited support for JSON Schema's =oneOf=, =anyOf=, =allOf=, and
  =not=. Only uniform simple types (string, numerics, monomorphic) arrays are
  supported. Anything else is treated as untyped JSON.

* Motivation

We did not find OCaml-Swagger until most initial work had been completed on this
project. We were only looking for OpenAPI generation, and did not think to look
for "swagger". That said, OCaml-Swagger only supports (part of) Swagger 2.0,
which was released in 2014. OooapI supports (part of) OpenAPI version 3,
released in 2017.

At the time work on this library was initiated, the OCaml client generation
supplied by OpenAPI Generator had the following documented errors:

- https://github.com/OpenAPITools/openapi-generator/issues/14987
- https://github.com/OpenAPITools/openapi-generator/issues/12767
- https://github.com/OpenAPITools/openapi-generator/issues/12572
- https://github.com/OpenAPITools/openapi-generator/issues/8397
- https://github.com/OpenAPITools/openapi-generator/issues/16890

To see the current known errors with OCaml generation, see https://github.com/OpenAPITools/openapi-generator/issues?q=is%3Aissue+is%3Aopen+ocaml

However, the tool has broader stability and correctness issues.  For a lengthy
discussion of the tools copious shortcomings and rough spots, see  [[https://github.com/OpenAPITools/openapi-generator/issues/7490][Do people
successfully use this? #7490]]?

Our own attempt to use the tool reflected the struggles discussed in issue
#7490, and we encountered numerous generation errors resulting in generation of
syntactically invalid OCaml programs. We ended up generating (a nontrivial
amount of) broken code that required significant manual fixes, and the quality
and quantity of which was not up to our standards.

We explored contributing fixes to the generator, but after investigating the
implementation, we came to the conclusion that the approach to generation via
[[https://github.com/OpenAPITools/openapi-generator/tree/c6a4947523dd079492d3604d45e451a31f5e94a7/modules/openapi-generator/src/main/resources/ocaml][mustache templates]] was too fragile and ad hoc to be worth the invested time.

We hope that approaching this problem through a principled metaprogramming
approach, leveraging OCaml's ppx system and supporting libraries, will enable a
more modular and a more correct implementation.

All that said, we have come to the conclusion that the main problems troubling
OpenAPI-Generator are probably just inheritence from the copious accidental
complexity permeating JSON Schema and OpenaAPI

* Footnotes

[fn:1] Pronounced variously "ooo-ah-pea", "ooo-ah-pie",  "oh-oh-oh-ay-pee-eye",
or any other way you like.
