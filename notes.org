#+title: Notes

* Constructing OCaml

For constructing OCaml
 https://ocaml-ppx.github.io/ppxlib/ppxlib/generating-code.html#metaquot
* Notes

** To convert an OpenAPI spec from yaml to json
Using https://github.com/kislyuk/yq

#+begin_src sh
yq < ./thespec.yaml > ./thespec.json
#+end_src

* Tasks
** TODO Map OpenAPI to a more sensible data structure
*** Reuse Cohttp's =http= types as much as possible.
- But this does not fully suffice, b/c
  - no support for representing path parameters
  - no support for representing body
  - headers are abstract
*** Resources
-
*** TODO Try using Hmap for params https://erratique.ch/software/hmap/doc/Hmap

I think this should be more ergonomic and concise.
** TODO Automate conversion of yaml to json for specs, via yq
** TODO Support url encoded forms
** DONE Move hardcoded ppx module into library that can be imported
This then also takes care of all needed dependencies!
** TODO Generate OpenAPI specs from ocaml values
** TODO Put ATD generated sources into the source tree to reduce the dependency cone?
** KILL Add generation of a dune stanza
Not needed know that we supply a library.
* On OpenAPI and JSON Schema
** =parameters= for an endpoint can be specified in two different ways, and consumers of a spec are responsible for detecting overrides
This amounts to an ad hoc, bizarre method of doing inheritance.

See the =parameters= property in these places

- https://spec.openapis.org/oas/latest.html#operationObject
- https://spec.openapis.org/oas/latest.html#path-item-object
