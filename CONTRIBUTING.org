#+title: Contributing

Contributations are very welcome and it is unlikely further development of this
tool will proceed without them.

* Goal

OooapI aims to approach the problem of HTTP client generation thru principled
metaprogramming.

* Code Organization

- [[./bin/][./bin]] :: The =oooapi= executable that generates ocaml code from an OpenAPI
  spec.
- ./[[./lib/][lib]]  :: The internal library used by the =oooapi= executable.
- [[file:oooapi_lib/][./oooapi_lib]] :: The small library required by =oooapi= generated code.
- [[./openapi_spec][./openapi_spec]] :: A library implementing a (partial) representation of the
  OpenAPI spec, via ATD specs.
- [[./vendor][./vendor]]  :: Vendored libraries. Currently only including
  =json-data-encoding=, which is used for its JSON spec support (and includes
  some small, but non-trivial fixes and adaptations).

* Building

Instead of the default =dune build=, you'll probably want to use

#+begin_src sh
dune build @check
#+end_src

This avoids building a very large test dependency, which can take minutes.

* Testing

To test spec parsing and client generation

#+begin_src sh
dune test
#+end_src

On a fresh build, the latter can take a long time (~10 mins) dune to the size of
the generated github API.

To run the end to end tests against the OpenAI API

#+begin_src sh
export OPENAI_API_KEY=<your-api-key>
export LOCAL_TESTS=true
#+end_src
